#!/bin/sh
#Give the args some sensible names
Executable=$1
ConfigFile=$2
ServerFile=$3
JobName=$4


####################################################
###### Beginning of section requiring editing ######
####################################################

#Who'll get the emails from the farm
MailAddress="wagners@kph.uni-mainz.de"

####################################################
###### End of section requiring editing ############
####################################################


#get the name of this executable
exe=`basename $0`

#the maximum time the job will be allowed HH:MM:SS
#This is the max allowed on the batch_x86 queue.
#Set high in case 
WALLTIME=24:00:00

print_usage(){
    echo
    echo "Usage:"
    echo "$exe <Executable> <GoATConfig> <GoATServer> <JobName>"
    echo
    echo "<Executable>:   GoAT/ant executable which should be used"
    echo "<GoATConfig>:   Top level GoAT config file"
    echo "<GoATServer>:   Top level GoAT server file"
    echo "<JobName>:       A directory jobs/<JobName> will be created"
    echo "                 if it doesn't exist and scripts put there"
    echo "Example: "
    echo "$exe goat configfiles/GoAT-Physics.dat configfiles/GoAT-Server.dat myjob"
}

#check that we have all the args, otherwise print use
if [ $# -lt 4 ]; then
    print_usage;
    exit 0;
fi

#Location and suffix for input files
InputDir=`gawk '{if($1=="Input-Directory:")print $2}' $ServerFile`
InputPre=`gawk '{if($1=="Input-Prefix:")print $2}' $ServerFile`

#Location and suffix for output files
OutputDir=`gawk '{if($1=="Output-Directory:")print $2}' $ServerFile`
OutputPre=`gawk '{if($1=="Output-Prefix:")print $2}' $ServerFile`

GoatExe=""
if [ -f $Executable ]; then
    GoatExe=$Executable
elif [ -f "build/bin/$Executable" ]; then
    GoatExe="build/bin/$Executable"
else
    echo "Couldn't find the specified executable $Executable"
    echo "Please provide the correct name or path"
    exit 1;
fi

MainDir=`pwd`

if [ -z $InputDir ]; then InputDir=`pwd`; fi
if [ -z $InputPre ]; then InputPre="GoAT"; fi
if [ -z $OutputDir ]; then OutputDir=`pwd`; fi
if [ -z $OutputPre ]; then OutputPre="Analysis"; fi

#make some subdirectories for job and setup files
JobDir="jobs/$JobName"
mkdir -p $JobDir
mkdir -p "$JobDir/jobfiles"

mkdir -p $OutputDir
mkdir -p "${OutputDir}/root"
mkdir -p "${OutputDir}/log"

FileList="${JobDir}/FileList.dat"
gawk '{if($1=="Input-File:")print $2}' $ServerFile >> $FileList

#if there are no input files specified, then scan input directory into temp
Number=`wc -l ${FileList} | awk '{print $1}'`
if [ $Number -eq 0 ]; then
    ls -1 $InputDir/${InputPre}*.root | xargs -n1 basename > $FileList
fi

#Loop over each line and create the job files
while read line           
do

    echo "Making a job for File: $line";
    number=`echo $line | sed -r 's/.*_([0-9]*)\..*/\1/g'`

    #strip off the .root, and any directory paths
    BaseName=`basename $line .root | sed "s/${InputPre}/${OutputPre}/"`
    JobFile="${JobDir}/jobfiles/${BaseName}.sub"
    NodeDir="/scratch/${USER}/${BaseName}"

    InputFile="$InputDir/$line"
    OutputFile="$NodeDir/${BaseName}.root"

    #now make the job file
    echo "#!/bin/sh" > $JobFile;
    echo "#PBS -N GoAT_$number" >> $JobFile;
    echo "#PBS -m a" >> $JobFile;
    echo "#PBS -M $MailAddress"  >> $JobFile;
    echo "#PBS -V"  >> $JobFile;
    echo "#PBS -l ncpus=3,walltime=${WALLTIME}" >> $JobFile;
    echo "#PBS -e ${JobDir}/jobfiles"  >> $JobFile;
    echo "#PBS -o ${JobDir}/jobfiles"  >> $JobFile;
    echo "#PBS -q batch" >> $JobFile;
    echo "#"  >> $JobFile;
    echo "#InputFiles: $line"   >> $JobFile;
    echo "#"  >> $JobFile;
    echo "export GoAT_EXECUTABLE=\"$MainDir/$GoatExe\"" >> $JobFile;
    echo "export GoAT_MAINDIR=\"$MainDir\""  >> $JobFile;
    echo "export GoAT_CONFIGFILE=\"$ConfigFile\""  >> $JobFile;
    echo "export GoAT_INPUTFILE=\"$InputFile\""  >> $JobFile;
    echo "export GoAT_OUTPUTFILE=\"$OutputFile\""  >> $JobFile;
    echo "export GoAT_OUTPUTDIR=\"$OutputDir\""  >> $JobFile;
    echo "#"  >> $JobFile;
    echo "#This is the executable that gets run on the node"  >> $JobFile;
    echo "/home/wagners/a2/a2GoAT/scripts/GoATNode"  >> $JobFile;
    echo "#"  >> $JobFile;
    echo "exit 0"  >> $JobFile;
    echo "##end of job script"  >> $JobFile;

    chmod +x $JobFile;

done < $FileList

topJob=`ls -1 -r ${JobDir}/jobfiles/*.sub | tail -1`

echo
echo "Job submission scripts are in ${JobDir}/jobfiles."
echo 
echo "Here's the corrseponding job submission script:"
echo "cat $topJob"
echo
cat $topJob

echo
echo
